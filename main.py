'''
Author: MrDerpus

Version: 2.0.1 -A

Dev / compatibility conditions:
Fedora  38 Python 3.12.1
Windows 10 Python 3.12.2


+ Added unnecessary code, which is to be removed in the next few versions.

+ Fixed a formatting bug that would close the keyword tag before a div tag when outputted.

+ Added functionality that allows you to add additional tag arguments with the tag attribute
syntax separator.


x Some tags will have 'whitespace' artifacting in the tag elements.
This has no affect on the code, it just looks funny.
This is low priority.

x All $commands and tags require the syntax separator to take values.
This will be changed in the next fewer versions.

x Added simular confusing variable names; this will be rectified in the next version.
_tagArguments
tagArguments
tag_args
other_tag_Args


? I want to add list support (ol / ul + li).
I aim to ad this to the next revision.

? I would like to add a HTML formatter, to format the output file.
I am to add this in the next revision. 
'''

from rich.traceback import install; install(show_locals = True) # type: ignore
from rich.console   import Console; c = Console() # type: ignore

import click # type: ignore

import sys
import os

from settings import HASH, COMMENTS, SYNTAX, VALID


#Version program,
version = '2.0.1 -A'

# custom function to test if a string is wrapped in a specific char.
# remove for version 0.0.3 - never used.
def isWrapped(string:str, char:str='"'):
	if(string[0] and string[len(string)-1] != char):
		return False
	else:
		return True
	

# Custom error messages printed to the screen.
def ERROR(ERROR:str='EMPTY STRING', LINE:int = -999, DESCRIPTION:str = 'EMPTY STRING', EXIT:bool = True, EXIT_CODE:int = 1, DISPLAY_TYPE:int = 0):
	if(DISPLAY_TYPE == 0): c.print(f' ERROR @ LINE: {LINE} \n {ERROR} \n {DESCRIPTION} \n')
	elif(DISPLAY_TYPE == 1): c.print(f' {ERROR}')

		
	if(EXIT == True): sys.exit(EXIT_CODE)


@click.group()
def cli(): pass




@click.command()
@click.option('--input_file',   '-i',  default = HASH.NO_INPUT_FILE)
@click.option('--output_file',  '-o',  default = HASH.NO_OUTPUT_FILE)
def build(input_file:str, output_file:str):

	# Var declare 
	converted_line:str = '' # What gets output to user defined file.
	innerText:str = '' # 
	tag_args:str  = ''
	line_count:int = 1
	keyword:str = ''
	previous_keyword:str = ''

	other_tag_Args:str = ''
	
	classInLine:bool = False
	idInLine:bool = False
	dic:dict = {}

	
	

	# If there where either no defined input or output files, display error and exit.
	if(input_file == HASH.NO_INPUT_FILE):
		ERROR('There was no input .SHTML file defined.', DISPLAY_TYPE=1, EXIT=True)

		#if(not os.path.exists(input_file)):
		#	ERROR(f'The script you defined \'{input_file}\' does not exist.', DISPLAY_TYPE=1, EXIT=True)


	elif(output_file == HASH.NO_OUTPUT_FILE):
		ERROR('There was no output .HTML file defined.', DISPLAY_TYPE=1, EXIT=True)

	
	# remove file, only for it to be created again.
	if(os.path.exists(output_file)):
		os.remove(output_file)



	# Output 
	c.print(f' Building output: {output_file} \n', style = '#00ffff')
	with open(output_file, 'a') as outfile:
		outfile.write(f'<!-- This HTML was generated by SHTML v{version} -->\n')




	# Read file line by line
	with open(input_file, 'r') as infile:

		
		for line in infile:
			line = line.lstrip().rstrip() # Cleanse line and grab keyword.


			

			# is line a comment?
			comment = len(line) >= 1
			if(comment and line[0] == COMMENTS.SINGLE_LINE_SCRIPT):  # comment for script itself.
				keyword = HASH.COMMENT
				converted_line = ''
			else:
				keyword = ''
			
			if(comment and line[0:2] == COMMENTS.SINGLE_LINE_HTML): # html comment.
				keyword = HASH.COMMENT
				innerText = line[2:].lstrip().rstrip()
			else:
				keyword = ''


			# Are class and id called in line?
			# If so, then grab string positions
			# and set bools to true. If not, set
			# bools to false. 
			if('.' in line.split(SYNTAX.SEPARATOR)[0]):
				dic['.'] = line.find('.')
				classInLine = True
			else:
				classInLine = False


			if('#' in line.split(SYNTAX.SEPARATOR)[0]):
				dic['#'] = line.find('#')
				idInLine = True
			else:
				idInLine = False


			# Grab keyword
			if(keyword != HASH.COMMENT):
				try:
					keyword = line[0:sorted(dic.values())[0]].lstrip().rstrip()
				except:
					keyword = line.split(SYNTAX.SEPARATOR)[0].lstrip().rstrip().lower()



			# Grab innerText
			try:
				innerText = line.split(SYNTAX.SEPARATOR)[1].lstrip().rstrip()
				if(SYNTAX.TAG_ATTRIBUTE in innerText): # is there a tag attribute seq in line?
					other_tag_Args += f'{innerText.split(SYNTAX.TAG_ATTRIBUTE)[1]}'
					innerText = innerText.split(SYNTAX.TAG_ATTRIBUTE)[0].lstrip().rstrip()

			except:
				innerText = ''
				other_tag_Args = ''


			# Grab tag elements
			tagArguments = line.replace(keyword, '').split(SYNTAX.SEPARATOR)[0].lstrip().rstrip()
			tagArguments = tagArguments.replace(' ', '')


			# double handle to make sure either in in the line.
			if classInLine: dic[SYNTAX.CLASS] = tagArguments.find(SYNTAX.CLASS)

			if idInLine: dic[SYNTAX.ID] = tagArguments.find(SYNTAX.ID)




			# If CLASS position value is less than the ID position value,
			# grab then grab CLASS value first and then ID value.
			# and Vice versa. This is purely for esthetics.
			if classInLine and idInLine == True: 
				if(dic[SYNTAX.CLASS] <= dic[SYNTAX.ID]):
					#print(tagArguments.split('#'))
					idName = tagArguments.split(SYNTAX.ID)[1]

					className = tagArguments[1:dic[SYNTAX.ID]]
					_tagArguments = f'class="{className}" id="{idName}"'

				else:
					className = tagArguments.split(SYNTAX.CLASS)[1]

					idName = tagArguments[1:dic[SYNTAX.CLASS]]
					_tagArguments = f'id="{idName}" class="{className}"'

			# if only class
			elif classInLine == True and idInLine == False:
				className = tagArguments[1:]
				_tagArguments = f'class="{className}"'

			# if only id
			elif idInLine == True and classInLine == False:
				idName = tagArguments[1:]
				_tagArguments = f'id="{idName}"'

			# if None
			else:
				_tagArguments = f''

			tag_args = f'{_tagArguments} {other_tag_Args}'
			# ----------------------------


			# Output tags depending on the type as defined.
			if(keyword in VALID.HTML_SELF_CLOSING):
				converted_line = f'<{keyword} {tag_args}/>'


			elif(keyword in VALID.HTML_INTERVENTION):
				converted_line = f'<{keyword} {tag_args}>{innerText}</{keyword}>'

				if(SYNTAX.CLOSE in innerText): # closing tag
					innerText = innerText.replace(SYNTAX.CLOSE, '').lstrip().rstrip()
					#innerText += f'</{previous_keyword}>'

					converted_line = f'<{keyword} {tag_args}>{innerText}</{keyword}>\n</{previous_keyword}>'
				

			elif(keyword in VALID.HTML_NON_INTERVENTION):
				converted_line = f'<{keyword} {tag_args}>{innerText}'
				
				if(keyword == 'div'):
					previous_keyword = keyword


			elif(keyword in VALID.HTML_CUSTOM):
				custom = keyword

				match custom:
					case 'html':
						converted_line = '<!DOCTYPE html>\n<html>'
					
					case 'script':
						converted_line = f'<script src="{innerText}" {tag_args}></script>'
					
					case 'stylesheet':
						converted_line = f'<link rel="stylesheet" type="text/css" href="{innerText}" {tag_args} />'

					case 'body':
						converted_line = f'</head>\n<body {tag_args}>'


			elif(keyword in VALID.COMMANDS):
				command = keyword
				converted_line = ''

				match command:
					case '$sep':
						SYNTAX.SEPARATOR = line.split('"')[1]
			
					case '$end':
						SYNTAX.CLOSE = line.split('"')[1]

					case '$html':
						converted_line = innerText

					case '$exit':
						sys.exit(0)


			elif(keyword == HASH.COMMENT): # comment
				converted_line = f'<!-- {line[2:]} -->'

			else: # Some unknown error, or a blank space in document.
				if(len(keyword) > 0):
					ERROR(f'Unknown keyword or command \'{keyword}\'', line_count, 'The keyword you specified is invalid, please check you spelling.', False)
				converted_line = ''





			dic = {} # refresh dict for fresh new line draw.
			other_tag_Args = ''
			# Write to file
			if(len(converted_line) > 0):
				with open(output_file, 'a') as outfile:
					outfile.write(converted_line + '\n')



			# Increment by 1
			line_count += 1

		# At the end of executing the script, add closing body & html tags
		# automatically.
		with open(output_file, 'a') as outfile:
			outfile.write('</body>\n</html>')
			
			



# Add command, and run command.
cli.add_command(build)


if __name__ == '__main__':
	cli()