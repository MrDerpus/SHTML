'''
Author: MrDerpus


Version: 0.0.3


Dev conditions:
Windows 10 / Fedora 38
Python 3.12.2


Tested Compatible OS's:
Windows 10
Fedora  38


Description: 
Simple HTML (SHTML).


Added:
+ Commands
	> Removed the need to use the $close command.
	> added $html tag.

+ Tags
	>


What I want to add next:
	+ Cleaner code.
	+ Better comments.
	+ Multiline comments.
	+ More tags.
	+ More commands.
	- Remove $close command.
'''




from rich.traceback import install; install(show_locals = True) # type: ignore
from rich.console   import Console; c = Console() # type: ignore

import click # type: ignore

import sys
import os

from settings import HASH, COMMENTS, SYNTAX


#Version program,
version = '0.0.3'

# custom function to test if a string is wrapped in a specific char.
# remove for version 0.0.3 - never used.
def isWrapped(string:str, char:str='"'):
	if(string[0] and string[len(string)-1] != char):
		return False
	else:
		return True


@click.group()
def cli():
	pass




@click.command()
@click.option('--input_file',   '-i',  default = HASH.NO_INPUT_FILE)
@click.option('--output_file',  '-o',  default = HASH.NO_OUTPUT_FILE)
@click.option('--minimal_html', '-m',  default = False)
#@click.option('--error_debug', '-d0',  default = False)
#def build(input_file:str, output_file:str, minimal_html:bool, error_debug:bool):
def build(input_file:str, output_file:str, minimal_html:bool):

	# Var declare 
	minimal_file_output:bool = minimal_html
	converted_line:str = '' # What gets output to user defined file.
	innerText:str = '' # 
	tag_args:str  = ''
	kill:int = 0
	line_count:str = 1
	keyword:str = ''
	previous_keyword:str = ''

	
	
	# If there where either no defined input or output files, display error and exit.
	if(input_file == HASH.NO_INPUT_FILE):
		c.print(' There was no input .SHTML script defined. \n', style = '#ff0000')
		sys.exit(1)
	elif(output_file == HASH.NO_OUTPUT_FILE):
		c.print(' There was no output .HTML file defined.   \n', style = '#ff0000')
		sys.exit(1)


	
	
	# remove file, only for it to be created again.
	if(os.path.exists(output_file)):
		os.remove(output_file)



	# Output
	c.print(f' Building output: {output_file} \n', style = '#00ffff')
	with open(output_file, 'a') as outfile:
		outfile.write(f'<!-- This HTML was generated by SHTML v{version} -->\n')




	# Read file line by line
	with open(input_file, 'r') as infile:


		for line in infile:
			line = line.lstrip().rstrip() # Cleanse line and grab keyword.
			keyword = line.split('"')[0].lstrip().rstrip().lower()



			try: # Grab tag innerText for HTML tag
				innerText = line.split('"')[1]
				innerText = innerText.replace("/n", '<br>')
			except:
				innerText = ''


			
			try: # Grab tag arguments for HTML element.
				tag_args = line.split(SYNTAX.SEPARATOR)[1].lstrip().rstrip()
				tag_args = tag_args.replace('colour', 'color')
			except Exception as err:
				#if(error_debug == True):
				#	c.print(f'{line_count} {err}', style = '#ff0000')
				tag_args = ''
				pass







			# Functions for closing tags!
			if(SYNTAX.CLOSE in tag_args):
				tag_args = tag_args.replace(SYNTAX.CLOSE, '')

				close_tag = len(previous_keyword) > 0
				if(close_tag):
					innerText += f'</{previous_keyword}>\n'






			# is line a comment?
			comment = len(line) >= 1
			if(comment and line[0] == COMMENTS.SINGLE_LINE_SCRIPT):  # comment for script itself.
				keyword = HASH.COMMENT
				converted_line = ''
			
			if(comment and line[0:2] == COMMENTS.SINGLE_LINE_HTML): # html comment.
				keyword = HASH.COMMENT
				innerText = line[2:].lstrip().rstrip()
				converted_line = f'<!-- {innerText} -->'






			# keywords and commands
			match keyword:
				case 'html': converted_line = '<!DOCTYPE html>\n<html>'

				case 'head': converted_line = f'<head {tag_args}>'

				case 'stylesheet': converted_line = f'<link rel="stylesheet" type="text/css" href="{innerText}" />'
				
				case 'script': converted_line = f'<script src="{innerText}" {tag_args}></script>'

				case 'title': converted_line = f'<title>{innerText}</title>'

				case 'body': converted_line = f'</head>\n<body {tag_args}>'

				case 'br': converted_line = '<br>'



				case str(HASH.COMMENT): pass # ignore line
					


				case 'h1': converted_line = f'<h1 {tag_args}>{innerText}</h1>'
				
				case 'h2': converted_line = f'<h2 {tag_args}>{innerText}</h2>'

				case 'h3': converted_line = f'<h3 {tag_args}>{innerText}</h3>'

				case 'h4': converted_line = f'<h4 {tag_args}>{innerText}</h4>'

				case 'h5': converted_line = f'<h5 {tag_args}>{innerText}</h5>'

				case 'h6': converted_line = f'<h6 {tag_args}>{innerText}</h6>'

				case 'p':  converted_line = f'<p {tag_args}>{innerText}</p>'

				case 'a':  converted_line = f'<a {tag_args}>{innerText}</a>'

				case 'img': converted_line = f'<img src="{innerText}" {tag_args} />'

				case 'div':
					converted_line = f'<div {tag_args}>'
					previous_keyword = keyword



				# Compiler / Language settings

				case '$html': # Allows you to inject HTML code.
					converted_line = innerText

				case '$close':
					converted_line = f'</{previous_keyword}>'

				case '$exit':
					converted_line = '</body>\n</html>'
					kill = 1 # Will exit file after all
				
				case '$sep':
					converted_line = ''
					SYNTAX.SEPARATOR = line.split('"')[1]

				case '$end':
					SYNTAX.CLOSE = line.split('"')[1]

				case '$min':
					minimal_file_output = True

				case _:
					if(len(keyword) > 0):
						c.print(f' Unknown keyword @ line {line_count}: {keyword}. ', style = '#ffff00')
						converted_line = f'<!-- Unknown keyword: {keyword} -->'
					else:
						converted_line = ''



			#output to output_file
			if(len(converted_line) > 0): # only print output if changes are made.
				with open(output_file, 'a') as outfile:
					outfile.write(converted_line)
					if(minimal_file_output == False):
						outfile.write('\n')

			
			# Increment by 1
			line_count += 1

			# if user typed ki
			if(kill >= 1):
				#c.print(' Exiting . . .', style = '#ffff00')
				sys.exit(0)
			


		# At the end of executing the script, add closing body & html tags
		# automatically.
		with open(output_file, 'a') as outfile:
			outfile.write('</body>\n</html>')
			
			



# Add command, and run command.
cli.add_command(build)


if __name__ == '__main__':
	cli()
