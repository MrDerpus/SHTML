'''
Author: MrDerpus


Version: 1.0.0 -A


Dev conditions:
Windows 10 / Fedora 38
Python 3.12.2


Tested Compatible OS's:
Windows 10
Fedora  38


Description: 
Simple HTML (SHTML).


'''
# 1.
# Assume the user inputs valid HTML code, unless the
# inputs a $command

# 2.
# Have a filter where that checks wether tags are Self closing,
# or need help with self closing the tags.

# 3.
# Have language focus on more on $commands rather than tags.



from rich.traceback import install; install(show_locals = True) # type: ignore
from rich.console   import Console; c = Console() # type: ignore

import click # type: ignore

import sys
import os

from settings import HASH, COMMENTS, SYNTAX, VALID


#Version program,
version = '1.0.0 -A'

# custom function to test if a string is wrapped in a specific char.
# remove for version 0.0.3 - never used.
def isWrapped(string:str, char:str='"'):
	if(string[0] and string[len(string)-1] != char):
		return False
	else:
		return True
	

# Custom error messages printed to the screen.
def ERROR(ERROR:str='EMPTY STRING', LINE:int = -999, DESCRIPTION:str = 'EMPTY STRING', EXIT:bool = True, EXIT_CODE:int = 1, DISPLAY_TYPE:int = 0):
	if(DISPLAY_TYPE == 0):
		c.print(f' ERROR @ LINE: {LINE} \n {ERROR} \n {DESCRIPTION} \n')
	elif(DISPLAY_TYPE == 1):
		c.print(f' {ERROR}')

		
	if(EXIT == True):
		sys.exit(EXIT_CODE)


@click.group()
def cli():
	pass




@click.command()
@click.option('--input_file',   '-i',  default = HASH.NO_INPUT_FILE)
@click.option('--output_file',  '-o',  default = HASH.NO_OUTPUT_FILE)
@click.option('--minimal_html', '-m',  default = False)
#@click.option('--error_debug', '-d0',  default = False)
#def build(input_file:str, output_file:str, minimal_html:bool, error_debug:bool):
def build(input_file:str, output_file:str, minimal_html:bool):

	# Var declare 
	minimal_file_output:bool = minimal_html
	converted_line:str = '' # What gets output to user defined file.
	innerText:str = '' # 
	tag_args:str  = ''
	line_count:int = 1
	keyword:str = ''
	previous_keyword:str = ''

	
	
	# If there where either no defined input or output files, display error and exit.
	if(input_file == HASH.NO_INPUT_FILE):
		ERROR('There was no input .SHTML file defined', DISPLAY_TYPE=1, EXIT=True)
		if(not os.path.exist(input_file)):
			ERROR(f'The script {input_file} does not exist.', DISPLAY_TYPE=1, EXIT=True)

	elif(output_file == HASH.NO_OUTPUT_FILE):
		ERROR('There was no output .HTML file defined', DISPLAY_TYPE=1, EXIT=True)


	
	
	# remove file, only for it to be created again.
	if(os.path.exists(output_file)):
		os.remove(output_file)



	# Output 
	c.print(f' Building output: {output_file} \n', style = '#00ffff')
	with open(output_file, 'a') as outfile:
		outfile.write(f'<!-- This HTML was generated by SHTML v{version} -->\n')




	# Read file line by line
	with open(input_file, 'r') as infile:

		for line in infile:
			line = line.lstrip().rstrip() # Cleanse line and grab keyword.
			keyword = line.split('"')[0].lstrip().rstrip().lower()


			try: # Grab tag innerText for HTML tag
				innerText = line.split('"')[1]
				innerText = innerText.replace("/n", '<br>')
			except:
				innerText = ''

			
			try: # Grab tag arguments for HTML element.
				tag_args = line.split(SYNTAX.SEPARATOR)[1].lstrip().rstrip()
				tag_args = tag_args.replace('colour', 'color')
			except:
				tag_args = ''


			# is line a comment?
			comment = len(line) >= 1
			if(comment and line[0] == COMMENTS.SINGLE_LINE_SCRIPT):  # comment for script itself.
				keyword = HASH.COMMENT
				converted_line = ''
			
			if(comment and line[0:2] == COMMENTS.SINGLE_LINE_HTML): # html comment.
				keyword = HASH.COMMENT
				innerText = line[2:].lstrip().rstrip()
				

			# if line is blank, set line to be ignored
			if(len(line) <= 0): keyword = HASH.IGNORE


			# Error: unrecognised keyword / command
			if(keyword != HASH.COMMENT and keyword != HASH.IGNORE): # WHY DOES 'OR' NOT WORK??????
				if(keyword not in VALID.VALID):
					ERROR(f'Unknown keyword or command \'{keyword}\'', line_count, 'The keyword you specified is invalid, please check you spelling.', False)





			# Output tags depending on the type as defined.
			if(keyword in VALID.HTML_SELF_CLOSING):
				converted_line = f'<{keyword} {tag_args}/>'


			elif(keyword in VALID.HTML_INTERVENTION):
				
				if(SYNTAX.CLOSE in tag_args): # closing tag
					tag_args = tag_args.replace(SYNTAX.CLOSE, '')
					innerText += f'</{previous_keyword}>'

				converted_line = f'<{keyword} {tag_args}>{innerText}</{keyword}>'
				

			elif(keyword in VALID.HTML_NON_INTERVENTION):
				converted_line = f'<{keyword} {tag_args}>{innerText}'
				
				if(keyword == 'div'):
					previous_keyword = keyword


			elif(keyword in VALID.HTML_CUSTOM):
				custom = keyword

				match custom:
					case 'html':
						converted_line = '<!DOCTYPE html>\n<html>'
					
					case 'script':
						converted_line = f'<script src="{innerText}" {tag_args}></script>'
					
					case 'stylesheet':
						converted_line = f'<link rel="stylesheet" type="text/css" href="{innerText}" />'


			elif(keyword in VALID.COMMANDS):
				command = keyword
				converted_line = ''

				match command:
					case '$sep':
						SYNTAX.SEPARATOR = line.split('"')[1]
			
					case '$end':
						SYNTAX.CLOSE = line.split('"')[1]

					case '$html':
						converted_line = innerText

					case '$close':
						converted_line += f'</{previous_keyword}>'


			elif(keyword == HASH.COMMENT): # comment
				converted_line = f'<!-- {innerText} -->'

			else: # Some unknown error, or a blank space in document.
				converted_line = ''

			

			# Write to file
			if(len(converted_line) > 0):
				with open(output_file, 'a') as outfile:
					outfile.write(converted_line + '\n')



			# Increment by 1
			line_count += 1

		# At the end of executing the script, add closing body & html tags
		# automatically.
		with open(output_file, 'a') as outfile:
			outfile.write('</body>\n</html>')
			
			



# Add command, and run command.
cli.add_command(build)


if __name__ == '__main__':
	cli()